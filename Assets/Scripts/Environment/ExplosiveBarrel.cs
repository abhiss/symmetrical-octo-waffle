using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Shared;

public class ExplosiveBarrel : MonoBehaviour
{
    private HealthSystem _health;
    [SerializeField] private float _explosionDamage;
    [SerializeField] private GameObject _explosionPrefab;
    [SerializeField] private float _explosionRadius = 2f;
    private const float _explosionDuration = 2f;

    void Awake()
    {
        _health = GetComponent<HealthSystem>();
    }

    void Update()
    {
        // If the barrel is dead, cause it to explode.
        if (_health.currentHealth <= 0)
        {
            Explode();
        }
    }

    private void Explode()
    {
        // Instantiate an explosion effect.
        GameObject explosion = CreateExplosion();
        
        // Detect all colliders within a explosion radius.
        Collider[] collidersInExplosionRadius = Physics.OverlapSphere(transform.position, _explosionRadius);
        foreach (Collider collider in collidersInExplosionRadius)
        {
            bool isValidTarget = collider.CompareTag("Player") || collider.CompareTag("Enemy") || collider.CompareTag("Destructible");
            // If a collider is a valid target, deal damage to its health.
            if (isValidTarget){
                HealthSystem targetHealth = collider.gameObject.GetComponent<HealthSystem>();
                targetHealth.TakeDamage(gameObject, _explosionDamage);
            }
        }
        // Destroy the barrel.
        Destroy(gameObject);
        // Destroy the explosion generated by the barrel after a duration.
        Destroy(explosion, _explosionDuration);
    }

    private GameObject CreateExplosion()
    {
        // Instantiate an explosion based off an explosion prefab at the location of the barrel.
        GameObject explosion = Instantiate(_explosionPrefab, transform.position, Quaternion.identity);
        // Play an explosion sound effect.
        AudioSource explosionAudio = explosion.GetComponent<AudioSource>();
        explosionAudio.Play();
        return explosion;
    }
}
